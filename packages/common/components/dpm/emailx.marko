import { getAsObject, get } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import { URLSearchParams } from "url";

$ const adUnit = getAsObject(input, "adUnit");
$ const dpm = getAsObject(input, "dpm");

$ const useEmailxHref = defaultValue(input.useEmailxHref, false);

$ const withHeader = defaultValue(input.withHeader, true);
$ const urlParams = defaultValue(input.urlParams, false);
$ const isPromoSlot = (adUnit.name == "promotion-slot-1" && !input.withHeader);

$ const { name, alias } = adUnit;
$ const classNames = [`email-x-${alias}-${name}`, input.class];

<marko-newsletters-email-x-data|{ response }| decoded-params=["email", "send"]>
  <@ad-unit ...adUnit />
  <@params date=input.date email="@{email name}@" send="@{track_id}@" include-advertiser=true />
  <if(response)>
    $ const { data, clickHref, imageSrc } = response;
    $ const { ad } = data;

    $ const queryConnector = (ad.url && (ad.url.search(/\?/) + 1)) ? "&" : "?";
    $ const queryString = (urlParams) ? `${queryConnector}${new URLSearchParams(urlParams)}` : "";
    $ const adUrl = (isPromoSlot && urlParams) ? `${ad.url}${queryString}` : ad.url;

    <!-- determine whether to use emailx click url or the native ad url -->
    $ const href = useEmailxHref ? clickHref : adUrl;
    $ const imageAttrs = {
      ...getAsObject(input.image, "attrs"),
      width: ad.width,
      height: ad.height,
    };

    $ const withHeaderWrapperStyle = {
      "background-color": "#E5E5E5",
      "background": "#e5e5e5 linear-gradient(to right, #fff 0%, #e5e5e5 15%, #e5e5e5 85%, #fff 100%)",
      "border-bottom": "1px solid #ddd",
      "text-align": "center",
    };
    $ const headerLabelHTML = "<h5 style='font-size:9px; line-height:15px; margin:0px auto; padding:6px 0px 1px 0px; text-align:center; font-weight:normal; letter-spacing:1px; color:#999999; font-family:Helvetica,Arial,sans-serif; background-color: #E5E5E5; background: #e5e5e5 linear-gradient(to right, #fff 0%, #e5e5e5 15%, #e5e5e5 85%, #fff 100%); border-top:1px solid #ddd;'>ADVERTISEMENT</h5>";

    $ const headerLabel = (withHeader) ? headerLabelHTML : "";

    $ const adStyle = (withHeader) ? withHeaderWrapperStyle : {}
    <if(withHeader)>
      <!--[if (gte mso 9)|(lte IE 9)]><table width="600" bgcolor="#E5E5E5" align="center" cellpadding="0" cellspacing="0" border="0" style="margin:0px; padding:0px; border-collapse:collapse; background-color:#E5E5E5;" class="ieTableFix"><tr><td valign="top"><![endif]-->
    </if>
    <else>
      <!--[if (gte mso 9)|(lte IE 9)]> <table width="600" bgcolor="#FFFFFF" align="center" cellpadding="0" cellspacing="0" border="0" style="margin:0px; padding:0px; border-collapse:collapse; background-color:#FFFFFF;" class="ieTableFix"><tr><td valign="top"><![endif]-->
    </else>
    <div class="banner" style="margin:5px auto; padding:3px 0px 10px;min-width:300px !important; clear:both; overflow:hidden;">
      $!{headerLabel}
      <div ...input.attrs class=classNames style=adStyle>
        <marko-core-img ...input.image src=imageSrc attrs=imageAttrs alt=data.advertiser.name>
          <@link target="_blank" ...input.link href=href />
        </marko-core-img>
        <if(defaultValue(dpm.enabled, true))>
          $ const position = dpm.position || 0;
          $ const lcvDefaultValue = position + "|" + get(data, "ad.lineitemName");
          $ const dpmArgs = ["ln", "lc", "lcv", "lkw"].reduce((o, key) => {
            // allow null to unset the default values.
            if (dpm[key] === null) return { ...o, [key]: "" };

            // otherwise treat all values as strings
            const value = `${dpm[key] || ''}`;
            if (!value) return o;
            // if value is in the form of {some.path} (e.g. {ad.lineItemname})
            // get the value off of the emailx response
            // otherwise, treat the value as a literal string and use it
            const matches = /^\{(.*)\}$/.exec(value);
            if (matches && matches[1]) {
              const v = get(data, matches[1]);
              if (v) return { ...o, [key]: v };
              return o;
            }
            return { ...o, [key]: value };
          }, {
            lc: dpm.lc || "Advertising",
            lkw: "bannerad",
            ln: get(data, "ad.advertiserName"),
            lcv: lcvDefaultValue,
          });
          <marko-newsletters-omail-dpm ...dpmArgs />
        </if>
      </div>
    </div>
    <!--[if (gte mso 9)|(lte IE 9)]></td></tr></table><p class="ie" style="font-size: 1px; line-height: 15px; height: 15px; margin: 0px; padding: 0px; font-family: arial,sans-serif; text-align: left; color: #333; background-color: #FFFFFF; clear: both;">&nbsp;</p><![endif]-->
  </if>
  <else>
    <${input.whenEmpty} />
  </else>
</marko-newsletters-email-x-data>
